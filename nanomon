#!/usr/bin/env python
#
#  Extremely small and light weight monitoring.
#
#  Copyright (c) 2011-2015, Sean Reifschneider <jafo@tummy.com>
#  All Rights Reserved
#  Licensed under GPL version 3 or later, see "LICENSE" for more information.

configFile = '/usr/local/etc/nanomon.conf'

import os
import sys
import pickle
import syslog
syslog.openlog('nanomon', syslog.LOG_PID)


##################
class configClass:
    def __init__(self):
        self.commands = []
        self.debug = 0
        self.statusfile = None
        self.mailto = None
        self.mailto_set = False
        self.mailfrom = None
        self.mailfrom_set = False
        self.maxfailures = 15
        self.mailcmd = '/usr/sbin/sendmail -t -oi'
        self.status = None

    def cmd_command(self, command, success, description=None):
        self.commands.append((command, success, description))

    def cmd_alertafterfailures(self, maxfailures):
        self.maxfailures = maxfailures

    def cmd_statusfile(self, statusfile):
        self.statusfile = statusfile

    def cmd_mailto(self, mailto):
        self.mailto = mailto
        self.mailto_set = True

    def cmd_mailfrom(self, mailfrom):
        self.mailfrom = mailfrom
        self.mailfrom_set = True

    def cmd_mailcmd(self, mailcmd):
        self.mailcmd = mailcmd

    def cmd_debug(self, level=1):
        self.debug = level


###############################
def loadConfigFile(configFile):
    #  set up config environment
    config = configClass()
    namespace = {
        'command': config.cmd_command,
        'mailto': config.cmd_mailto,
        'mailfrom': config.cmd_mailfrom,
        'statusfile': config.cmd_statusfile,
        'debug': config.cmd_debug,
        'mailcmd': config.cmd_mailcmd,
        'alertafterfailures': config.cmd_alertafterfailures,
    }

    #  load the file
    import re
    try:
        execfile(configFile, {'re': re}, namespace)
    except Exception:
        print (
            'ERROR: Loading configuration file failed.'
            '  See below for details:')
        raise

    #  return the data
    return(config)


###################
class commandClass:
    def __init__(self):
        self.failures = []
        self.descriptions = []
        self.any_failed = False

    def run(self, command, success, description):
        import shlex
        import subprocess

        descriptions = self.descriptions
        failures = self.failures

        if isinstance(command, str):
            args = shlex.split(command)
        else:
            args = command

        if description is None:
            description = os.path.basename(args[0])

        proc = subprocess.Popen(
            args, stdout=subprocess.PIPE,
            stderr=subprocess.PIPE, close_fds=True)
        output, errors = proc.communicate()

        if isinstance(success, int):
            if proc.returncode != success:
                descriptions.append(description)
                failures.append('Check "%s"' % command)
                failures.append(
                    'Exit=%s expected %s'
                    % (proc.returncode, success))
                failures.append('   Output: %s' % output)
                failures.append('   Stderr: %s' % errors)
                self.any_failed = True
        elif callable(success):
            ret = success(output)
            if not ret:
                descriptions.append(description)
                failures.append('Check "%s"' % command)
                failures.append('Function returned "%s"' % (repr(ret),))
                failures.append('   Output: %s' % format(output))
                failures.append('   Stderr: %s' % format(errors))
                self.any_failed = True
        else:
            if success not in output:
                descriptions.append(description)
                failures.append('Check "%s"' % command)
                failures.append('String "%s" not found in output' % (success,))
                failures.append('   Output: %s' % format(output))
                failures.append('   Stderr: %s' % format(errors))
                self.any_failed = True


########################
def runcommands(config):
    runner = commandClass()
    for command, success, description in config.commands:
        runner.run(command, success, description)

    config.any_failed = runner.any_failed
    config.failures = runner.failures
    config.descriptions = runner.descriptions

    return runner.any_failed


#############
class Status:
    def __init__(self, filename):
        self.filename = filename
        self.load()

    def reset(self):
        self.status = {
            'failures': 0,
            'isup': 1,
            'descriptions': None,
        }


    def load(self):
        self.reset()

        try:
            with open(self.filename, 'r') as fp:
                filedata = fp.read()
                try:
                    self.status = pickle.loads(filedata)
                except:
                    pass
        except IOError:
            pass

    def save(self):
        with open(self.filename + '.tmp', 'w') as fp:
            pickle.dump(self.status, fp)
        os.rename(self.filename + '.tmp', self.filename)


##############
def format(s):
    if s is None:
        return s
    return s.rstrip()


###################################
def sendmail(config, isup, status):
    import subprocess
    import os

    if not config.mailto or not config.mailcmd:
        return

    if not config.mailfrom:
        config.mailfrom = config.mailto

    hostname = os.uname()[1]

    proc = subprocess.Popen(
        config.mailcmd.split(), stdin=subprocess.PIPE, close_fds=True)
    proc.stdin.write('From: %s\n' % config.mailfrom)
    proc.stdin.write('To: %s\n' % config.mailto)
    if isup:
        descriptions = status['last_alert_description']
        proc.stdin.write(
            'Subject: UP: Service restored: %s\n\n' % descriptions)
        proc.stdin.write('\n')
        proc.stdin.write('Services are restored on %s\n' % hostname)
    else:
        descriptions = status['alert_description']
        proc.stdin.write(
            'Subject: DOWN: Service OUTAGE: %s\n\n' % descriptions)
        proc.stdin.write('\n')
        proc.stdin.write('Services have issues on %s\n' % hostname)
        proc.stdin.write('\n')
        for line in config.failures:
            proc.stdin.write('%s\n' % line)
    proc.stdin.close()
    proc.wait()


#############################
def loadconfig(configFile):
    '''A wrapper for loading the config file which displays errors.'''
    try:
        config = loadConfigFile(configFile)
    except IOError, e:
        if e.errno == 2:
            print 'ERROR: Unable to open config file "%s":' % configFile
            print '  ', str(e)
            syslog.syslog('Invalid config file "%s"' % configFile)
            sys.exit(1)
        raise

    return config


###########
def main():
    config = loadconfig(configFile)

    if not config.mailto_set:
        print 'ERROR: No "mailto" specified in config file'
        sys.exit(1)

    if not config.mailfrom_set:
        print (
            'WARNING: No "mailfrom" specified in config file, using '
            '"mailto" value')

    config.status = Status(config.statusfile)
    status = config.status.status
    runcommands(config)

    if config.any_failed:
        status['failures'] += 1
        status['descriptions'] = ', '.join(config.descriptions)
    else:
        status['failures'] = 0
        status['descriptions'] = None
    alerting = status['failures'] > config.maxfailures

    send_alert = False
    if status['isup'] and alerting:
        #  was up, now is down
        status['isup'] = 0
        send_alert = True
    elif not status['isup'] and not alerting:
        #  was down, now is up
        status['isup'] = 1
        send_alert = True

    if send_alert:
        status['last_alert_description'] = status.get(
            'alert_description', 'Unknown')
        status['alert_description'] = status.get('descriptions', 'Unknown')

        if status['isup']:
            syslog.syslog(
                'Alert: UP: %s' % status['last_alert_description'])
        else:
            syslog.syslog(
                'Alert: DOWN: %s' % status['alert_description'])

        sendmail(config, status['isup'], status)

    config.status.save()


####################
def daemon(options):
    import time
    import signal

    if options.interval is None:
        sys.stderr.write('ERROR: Daemon mode requires "--interval"\n')
        sys.exit(1)

    if options.pidfile:
        def remove_pidfile(*args):
            os.remove(options.pidfile)
            sys.exit(0)
        fp = open(options.pidfile, 'w')
        fp.write('%s\n' % os.getpid())
        fp.close()
        signal.signal(signal.SIGINT, remove_pidfile)
        signal.signal(signal.SIGTERM, remove_pidfile)

    while True:
        time_before_check = time.time()
        try:
            syslog.syslog('Running check: %s' % time_before_check)
            main()
        except Exception, e:
            syslog.syslog(
                'ERROR: Received exception "%s" during check' % str(e))
        time_after_check = time.time()

        sleep_time = (time_before_check + options.interval) - time_after_check
        if sleep_time < 0.1:
            if options.min_interval:
                time.sleep(options.min_interval)
        else:
            time.sleep(sleep_time)


###################
def check_status():
    config = loadconfig(configFile)
    config.status = Status(config.statusfile)
    old_status = config.status.status
    if old_status['failures'] < 1:
        print 'OK'
        sys.exit(0)

    old_status['status'] = 'DOWN'
    if old_status['isup']:
        old_status['status'] = 'UP'

    print (
        'ERROR: %(failures)s failures (%(descriptions)s), %(status)s'
        % old_status)
    sys.exit(1)


############
def reset():
    config = loadconfig(configFile)
    old_status = Status(config.statusfile)
    old_status.reset()
    old_status.save()


############################
if __name__ == '__main__':
    from optparse import OptionParser

    opt_description = (
        'A small service checking program, which can run an '
        'series of commands, check their results, and report when they '
        'repeatedly fail, and when they recover.')
    opt_epilog = (
        'If called with the "reset" command, the status '
        'of all services is reset to to the default state.  If called '
        'with the "status" command, the state file is loaded and either '
        '"OK" is printed and nanomon exits with 0, or information on the '
        'failed services is printed and nanomon exits with 1.  If called '
        'with no command-line commands, a check of all services is run.  '
        'Typically this is how it is called from cron.  If called with '
        'the "daemon" command, nanomon loops running its own scheduler '
        'rather than running from cron.  This is useful if you want to run '
        'checks more frequently than every minute.')

    parser = OptionParser(
        usage='%prog [options] [status|reset|daemon]',
        description=opt_description, epilog=opt_epilog)
    parser.add_option(
        '-c', '--config', dest='config_file',
        metavar='FILE', help='Override the configuration file path')
    parser.add_option(
        '-i', '--interval', dest='interval',
        metavar='INTERVAL', default=None, type="int",
        help='Daemon mode: How frequently in seconds checks are run')
    parser.add_option(
        '-m', '--min-interval', dest='min_interval',
        metavar='INTERVAL', default=None, type="int",
        help='Daemon mode: Minimum time in seconds between checks')
    parser.add_option(
        '-p', '--pidfile', dest='pidfile',
        metavar='FILE', default=None,
        help='Daemon mode: File to write process ID into.')
    (options, args) = parser.parse_args()

    if not 'daemon' in args and (
            options.interval is not None
            or options.min_interval is not None
            or options.pidfile is not None):
        sys.stderr.write(
            'ERROR: The "--interval", "--min-interval", and "--pidfile" '
            'options must\n   be used with the "daemon" command.\n')
        sys.exit(1)

    if options.config_file:
        configFile = options.config_file

    if 'status' in args:
        check_status()
    elif 'reset' in args:
        reset()
    elif 'daemon' in args:
        daemon(options)
    else:
        main()
