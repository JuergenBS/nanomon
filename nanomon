#!/usr/bin/env python
#
#  Extremely small and light weight monitoring.
#
#  Copyright (c) 2011, Sean Reifschneider <jafo@tummy.com>, All Rights Reserved
#  Licensed under GPL version 3 or later, see "LICENSE" for more information.

from __future__ import with_statement

configFile = '/usr/local/etc/nanomon.conf'

import os
import sys
import syslog
syslog.openlog('nanomon', syslog.LOG_PID)


###############################
def loadConfigFile(configFile):
	class configClass:
		def __init__(self):
			self.commands = []
			self.debug = 0
			self.statusfile = None
			self.mailto = None
			self.maxfailures = 15

		def cmd_command(self, command, success, description = None):
			self.commands.append(( command, success, description ))

		def cmd_statusfile(self, statusfile):
			self.statusfile = statusfile

		def cmd_mailto(self, mailto):
			self.mailto = mailto

		def cmd_debug(self, level = 1):
			self.debug = level

	#  set up config environment
	config = configClass()
	namespace = {
			'command' : config.cmd_command,
			'mailto' : config.cmd_mailto,
			'statusfile' : config.cmd_statusfile,
			'debug' : config.cmd_debug,
			}

	#  load the file
	import re
	try:
		execfile(configFile, {'re' : re}, namespace)
	except Exception, e:
		print 'ERROR: Loading configuration file failed.  See below for details:'
		raise
	
	#  return the data
	return(config)


########################
def runcommands(config):
	import shlex, subprocess

	failures = []
	descriptions = []
	any_failed = False
	for command, success, description in config.commands:
		if isinstance(command, str):
			args = shlex.split(command)
		else:
			args = command

		if description == None:
			description = os.path.basename(args[0])

		proc = subprocess.Popen(args, stdout = subprocess.PIPE,
				stderr = subprocess.PIPE, close_fds = True)
		output, errors = proc.communicate()

		if isinstance(success, int):
			#print 'int', proc.returncode, success
			if proc.returncode != success:
				descriptions.append(description)
				failures.append('Check "%s"' % command)
				failures.append('Exit=%s expected %s'
						% ( proc.returncode, success ))
				failures.append('   Output: %s' % output)
				failures.append('   Stderr: %s' % errors)
				any_failed = True
		elif callable(success):
			#print 'func', success(output)
			ret = success(output)
			if not ret:
				descriptions.append(description)
				failures.append('Check "%s"' % command)
				failures.append('Function returned "%s"' % ( repr(ret), ))
				failures.append('   Output: %s' % format(output))
				failures.append('   Stderr: %s' % format(errors))
				any_failed = True
		else:
			#print 'in', success, output
			if success not in output:
				descriptions.append(description)
				failures.append('Check "%s"' % command)
				failures.append('String "%s" not found in output' % ( success, ))
				failures.append('   Output: %s' % format(output))
				failures.append('   Stderr: %s' % format(errors))
				any_failed = True

	config.any_failed = any_failed
	config.failures = failures
	config.descriptions = descriptions

	return any_failed


#######################
def loadstatus(config):
	import pickle
	default = {
				'failures' : 0,
				'isup' : 1,
				'descriptions' : None,
				}

	try:
		with open(config.statusfile, 'r') as fp:
			try:
				data = pickle.load(fp)
			except:
				return default
			return data
	except IOError:
		return default


###############################
def savestatus(config, status):
	import pickle, os
	with open(config.statusfile + '.tmp', 'w') as fp:
		data = pickle.dump(status, fp)
	os.rename(config.statusfile + '.tmp', config.statusfile)


##############
def format(s):
	if s == None: return s
	return s.rstrip()


###########################
def sendmail(config, isup):
	import subprocess, os

	if isup:
		subject = 'UP: Service restored'
	else:
		subject = 'DOWN: Service restored'

	hostname = os.uname()[1]

	proc = subprocess.Popen(['/usr/sbin/sendmail', '-t', '-oi'],
			stdin = subprocess.PIPE, close_fds = True)
	proc.stdin.write('From: %s\n' % config.mailto)
	proc.stdin.write('To: %s\n' % config.mailto)
	if isup:
		proc.stdin.write('Subject: UP: Service restored\n\n')
		proc.stdin.write('\n')
		proc.stdin.write('Services are restored on %s\n' % hostname)
	else:
		descriptions = ', '.join(config.descriptions)
		proc.stdin.write('Subject: DOWN: Service OUTAGE: %s\n\n' % descriptions)
		proc.stdin.write('\n')
		proc.stdin.write('Services have issues on %s\n' % hostname)
		proc.stdin.write('\n')
		for line in config.failures:
			proc.stdin.write('%s\n' % line)
	proc.stdin.close()
	proc.wait()


#############################
def loadconfig(configFile):
	'''A wrapper for loading the config file which displays errors.'''
	try:
		config = loadConfigFile(configFile)
	except IOError, e:
		if e.errno == 2:
			print 'ERROR: Unable to open config file "%s":' % configFile
			print '  ', str(e)
			syslog.syslog('Invalid config file "%s"' % configFile)
			sys.exit(1)
		raise

	return config


###########
def main():
	config = loadconfig(configFile)

	if not config.mailto:
		print 'ERROR: No "mailto" specified in config file'
		sys.exit(1)

	old_status = loadstatus(config)
	results = runcommands(config)

	if config.any_failed:
		old_status['failures'] += 1
		old_status['descriptions'] = ', '.join(config.descriptions)
	else:
		old_status['failures'] = 0
		old_status['descriptions'] = None
	alerting = old_status['failures'] > config.maxfailures

	send_alert = False
	if old_status['isup'] and alerting:
		#  was up, now is down
		old_status['isup'] = 0
		send_alert = True
	elif not old_status['isup'] and not alerting:
		#  was down, now is up
		old_status['isup'] = 1
		send_alert = True
	
	savestatus(config, old_status)

	if send_alert:
		sendmail(config, old_status['isup'])


#############
def status():
	config = loadconfig(configFile)
	old_status = loadstatus(config)
	if old_status['failures'] < 1:
		print 'OK'
		sys.exit(0)

	old_status['status'] = 'DOWN'
	if old_status['isup']:
		old_status['status'] = 'UP'

	print ('ERROR: %(failures)s failures (%(descriptions)s), %(status)s'
			% old_status)
	sys.exit(1)


############
def reset():
	config = loadconfig(configFile)
	old_status = loadstatus(config)
	old_status['isup'] = 1
	old_status['failures'] = 0
	old_status['descriptions'] = None
	savestatus(config, old_status)


###############
def nanohelp():
	print 'usage: %s [status|reset|help]' % os.path.basename(sys.argv[0])
	print
	print '''   With no arguments, a service check is done.  Arguments are:
      help     This message.
      reset    Reset the status to act as if service checks succeeded.
               No notification is sent of the "up".  This can be used to cause
               regular alerts to be sent if the services are still down.
      status   Display information about the monitoring status.
               If everything is ok, "OK" is displayed and exit code is 0.
               Otherwise "ERROR:" is displayed followed by details, and
               exit with 1.'''
	sys.exit(0)


############################
if 'status' in sys.argv[1:]:
	status()
elif 'reset' in sys.argv[1:]:
	reset()
elif 'help' in sys.argv[1:] or '--help' in sys.argv[1:]:
	nanohelp()
else:
	main()
