#!/usr/bin/env python
#
#  Extremely small and light weight monitoring.
#
#  Copyright (c) 2011, Sean Reifschneider <jafo@tummy.com>, All Rights Reserved

from __future__ import with_statement

configFile = '/usr/local/etc/nanomon.conf'

import sys
import syslog
syslog.openlog('nanomon', syslog.LOG_PID)


###############################
def loadConfigFile(configFile):
	class configClass:
		def __init__(self):
			self.commands = []
			self.debug = 0
			self.statusfile = None
			self.mailto = None
			self.maxfailures = 15

		def cmd_command(self, command, success):
			self.commands.append(( command, success ))

		def cmd_statusfile(self, statusfile):
			self.statusfile = statusfile

		def cmd_mailto(self, mailto):
			self.mailto = mailto

		def cmd_debug(self, level = 1):
			self.debug = level

	#  set up config environment
	config = configClass()
	namespace = {
			'command' : config.cmd_command,
			'mailto' : config.cmd_mailto,
			'statusfile' : config.cmd_statusfile,
			'debug' : config.cmd_debug,
			}

	#  load the file
	import re
	try:
		execfile(configFile, {'re' : re}, namespace)
	except Exception, e:
		print 'ERROR: Loading configuration file failed.  See below for details:'
		raise
	
	#  return the data
	return(config)


########################
def runcommands(config):
	import shlex, subprocess

	failures = []
	any_failed = False
	for command in config.commands:
		if isinstance(command[0], str):
			args = shlex.split(command[0])
		else:
			args = command[0]

		proc = subprocess.Popen(args, stdout = subprocess.PIPE, close_fds = True)
		output, errors = proc.communicate()

		if isinstance(command[1], int):
			#print 'int', proc.returncode, command[1]
			if proc.returncode != command[1]:
				failures.append('Check "%s"' % command[0])
				failures.append('Exit=%s expected %s'
						% ( proc.returncode, command[1] ))
				failures.append('   Output: %s' % output)
				failures.append('   Stderr: %s' % errors)
				any_failed = True
		elif callable(command[1]):
			#print 'func', command[1](output)
			ret = command[1](output)
			if not ret:
				failures.append('Check "%s"' % command[0])
				failures.append('Function returned "%s"' % ( repr(ret), ))
				failures.append('   Output: %s' % format(output))
				failures.append('   Stderr: %s' % format(errors))
				any_failed = True
		else:
			#print 'in', command[1], output
			if command[1] not in output:
				failures.append('Check "%s"' % command[0])
				failures.append('String "%s" not found in output' % ( command[1], ))
				failures.append('   Output: %s' % format(output))
				failures.append('   Stderr: %s' % format(errors))
				any_failed = True

	config.any_failed = any_failed
	config.failures = failures

	return any_failed


#######################
def loadstatus(config):
	import pickle
	default = {
				'failures' : 0,
				'isup' : 1,
				}

	try:
		with open(config.statusfile, 'r') as fp:
			try:
				data = pickle.load(fp)
			except:
				return default
			return data
	except IOError:
		return default


###############################
def savestatus(config, status):
	import pickle, os
	with open(config.statusfile + '.tmp', 'w') as fp:
		data = pickle.dump(status, fp)
	os.rename(config.statusfile + '.tmp', config.statusfile)


##############
def format(s):
	if s == None: return s
	return s.rstrip()


###########################
def sendmail(config, isup):
	import subprocess, os

	if isup:
		subject = 'UP: Service restored'
	else:
		subject = 'DOWN: Service restored'

	hostname = os.uname()[1]

	proc = subprocess.Popen(['/usr/sbin/sendmail', '-t', '-oi'],
			stdin = subprocess.PIPE, close_fds = True)
	proc.stdin.write('From: %s\n' % config.mailto)
	proc.stdin.write('To: %s\n' % config.mailto)
	if isup:
		proc.stdin.write('Subject: UP: Service restored\n\n')
		proc.stdin.write('\n')
		proc.stdin.write('Services are restored on %s\n' % hostname)
	else:
		proc.stdin.write('Subject: DOWN: Service OUTAGE\n\n')
		proc.stdin.write('\n')
		proc.stdin.write('Services have issues on %s\n' % hostname)
		proc.stdin.write('\n')
		for line in config.failures:
			proc.stdin.write('%s\n' % line)
	proc.stdin.close()
	proc.wait()


###########
def main():
	try:
		config = loadConfigFile(configFile)
	except IOError, e:
		if e.errno == 2:
			print 'ERROR: Unable to open config file "%s":' % configFile
			print '  ', str(e)
			syslog.syslog('Invalid config file "%s"' % configFile)
			sys.exit(1)
		raise

	if not config.mailto:
		print 'ERROR: No "mailto" specified in config file'
		sys.exit(1)

	old_status = loadstatus(config)
	results = runcommands(config)

	if config.any_failed:
		old_status['failures'] += 1
	else:
		old_status['failures'] = 0
	alerting = old_status['failures'] > config.maxfailures

	send_alert = False
	if old_status['isup'] and alerting:
		#  was up, now is down
		old_status['isup'] = 0
		send_alert = True
	elif not old_status['isup'] and not alerting:
		#  was down, now is up
		old_status['isup'] = 1
		send_alert = True
	
	savestatus(config, old_status)

	if send_alert:
		sendmail(config, old_status['isup'])


######
main()
